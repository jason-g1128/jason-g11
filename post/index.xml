<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://jason.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jul 2020 13:44:11 +0800</lastBuildDate>
    
	<atom:link href="https://jason.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>线程</title>
      <link>https://jason.github.io/post/blog/</link>
      <pubDate>Sun, 12 Jul 2020 13:44:11 +0800</pubDate>
      
      <guid>https://jason.github.io/post/blog/</guid>
      <description>线程 主要内容  线程基础 线程池  教学目标 -[ ] 能够理解线程概念
-[ ] 学会使用线程的创建方式
-[ ] 能够理解线程的状态
-[ ] 能够理解线程通信概念
-[ ] 能够理解等待唤醒机制
-[ ] 能够描述Java中线程池运行原理
第一章 线程基础 1.1 线程简介 概念: 现代操作系统在运行一个程序时，会为其创建一个进程。例如，启动一个Java程序，操作系统就会创建一个Java进程。现代操作系统调度的最小单元是线程，也叫轻量级进程（LightWeight Process），在一个进程里可以创建多个线程，这些线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。处理器在这些线程上高速切换，让使用者感觉到这些线程在同时执行。
Java线程的实现方式：
Java线程使用操作系统的内核线程实现，内核线程（Kernel-Level Thread, KLT）是直接由操作系统内核（Kernel，内核）支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身（孙悟空的分身术），这样操作系统就有能力同时处理多件事情，支持多线程的内核就叫做多线程内核（Muti-Threads Kernel)。
Java程序如何使用内核线程：
程序一般通过使用内核线程的高级接口&amp;mdash;&amp;ndash;轻量级进程（Light Weight Process, LWP），也就是我们通常意义上的线程。每个LWP都由一个内核线程支持。也就是说任何时候使用Java代码创建线程，调用Thread.start()的时候，都是通过LWP接口创建了KLT内核线程，然后通过OS的Thread Scheduler对内核线程进行调度分配CPU。线程模型如下图所示：
内核线程的优点：
（1）每一个内核线程都是独立的轻量级进程，一个线程的阻塞不会影响整个进程的工作。
内核线程的缺点：
（1）由于是基于内核线程实现，各种线程的操作，如创建、析构、中断、休眠和同步，都需要系统调度（频繁从用户态切换进内核态），而系统调度的代价相对较高；
（2）占用内核资源，同时轻量级进程的数量有限。
主内存与工作内存：
JAVA内存模型规定了所有的变量都存储在主内存（Main Memory）中。所有的线程都有自己的工作内存，工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中执行，而不能直接读写主内存中的变量。同时，线程之间也无法读写对方的工作内存。关系图： 1.2 实现线程的方式 1.2.1 Runnable接口 一个接口，定义了一个run()方法，重写run()实现线程的主体逻辑
1.2.2 Thread类 Java中线程的抽象，将继承Runnable类的对象放入Thread中，Thread中定义很多控制管理线程的方法
为什么通常创建线程使用Runnable? 第一点：结构简单，层次分明，Runnable中只有一个run(),实现线程的主体逻辑只需要在run()中实现即可 第二点：不占用java单一继承的名额,在实现Runnable接口的同时还能继承其他的类 1.2.2.1 Thread类的常用方法   setName()/getName() 设置/获取线程名称
由于在一个进程中可能有多个线程，而多线程的运行状态又是不确定的，即不知道在多线程中当前执行的线程是哪个线程，所以在多线程操作中需要有一个明确的标识符标识出当前线程对象的信息，这个信息往往通过线程的名称来描述.当然也可以通过Thread的构造函数来设置public Thread(Runnable target,String name)</description>
    </item>
    
  </channel>
</rss>